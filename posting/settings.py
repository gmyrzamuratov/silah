"""
/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages
posting_db
CREATE USER web WITH PASSWORD 'silah2020';
GRANT ALL PRIVILEGES ON DATABASE posting_db TO web;

Django settings for posting project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
#https://social.silahreport.com/privacy-policy/
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%=1ug(o-b4qp+oe28##zj+)-=0(ox3r$ce7h9n9hh#ptd%i%_2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['ganiposting.com', 'localhost', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'project',
    'main',
    'authentication',
    'post',
    'social_providers',
    'rest_framework',
    'oauth2_provider'
]

AUTHENTICATION_BACKENDS = (
    'oauth2_provider.backends.OAuth2Backend',
    # Uncomment following if you want to access the admin
    'django.contrib.auth.backends.ModelBackend'
)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'main.middleware.timezone_middleware.TimezoneMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
]

MIDDLEWARE_CLASSES = (
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
)

ROOT_URLCONF = 'posting.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'posting.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups'},
    'ACCESS_TOKEN_EXPIRE_SECONDS': 36000,
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

LOGIN_URL = 'signin'
LOGIN_REDIRECT_URL = '/'
LOGOUT_URL = 'signout'
LOGOUT_REDIRECT_URL = '/'

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTH_USER_MODEL = 'authentication.MyUser'

# This OAuth 2.0 access scope allows an application to upload files to the
# authenticated user's YouTube channel, but doesn't allow other types of access.
FACEBOOK_APP_ID = "782739872502450"
FACEBOOK_APP_SECRET = "47f10701dcab48d53f1cf9f74c185fde"

CLIENT_SECRETS_FILE = "/system/client_id.json"
YOUTUBE_UPLOAD_SCOPE = ['https://www.googleapis.com/auth/youtube.upload', 'https://www.googleapis.com/auth/youtube.readonly']
YOUTUBE_API_SERVICE_NAME = "youtube"
YOUTUBE_API_VERSION = "v3"

GCALENDAR_CLIENT_SECRETS_FILE = "/system/gcalendar_credentials.json"
GCALENDAR_UPLOAD_SCOPE = ['https://www.googleapis.com/auth/calendar.readonly', 'https://www.googleapis.com/auth/calendar']
GCALENDAR_API_SERVICE_NAME = "calendar"
GCALENDAR_API_VERSION = "v3"


TWITTER_KEY = 'CuUMY9KnKU0GBU9QFl2gdI2P7'
TWITTER_SECRET = 'jgelb12omT3W0e0WRlfUDPBMVI0nkSMUZ6kWH9X6icytxBa0KC'
TWITTER_MAX_SYMBOL_COUNT = 280

HOOTSUITE_CLIENT_ID = '3647fee1-2a52-4d6a-a2f9-37a607a73c60'
HOOTSUITE_SECRET = 'P1I-OT_tEcv2'
HOOTSUITE_REDIRECT_URI = 'http://localhost/project/hootsuite_callback'
#HOOTSUITE_REDIRECT_URI = 'https://www.getpostman.com/oauth2/callback'

RAGIC_TOKEN = 'UGdPYzRCTFB4WDdCV1VueFhJdDJ0MGZWQ2Y2dCtvWHhlbDZBVHhKbGZvMTRiTkF0L3J6VDF6ZlhLMTZTTCt5WA=='

AWS_HOST = 'silah.cogvaeokj5vm.us-east-2.rds.amazonaws.com'
AWS_PORT = 3306
AWS_DB = 'silah'
AWS_USER = 'silah'
AWS_PASSWORD = '!SilahReport123$'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'posting/static'),
)
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
